require 'simplecov'
SimpleCov.start
require 'minitest/autorun'
require 'minitest/pride'
require './lib/alphabet'

class AlphabetTest < Minitest::Test

  def test_it_exists
  assert Alphabet.new
  end

  def test_alphanumeric_characters_exist
    alphabet = Alphabet.new
    result = characters = {
                "a" => ["0.","..",".."],
                "b" => ["0.","0.",".."],
                "c" => ["00","..",".."],
                "d" => ["00",".0",".."],
                "e" => ["0.",".0",".."],
                "f" => ["00","0.",".."],
                "g" => ["00","00",".."],
                "h" => ["0.","00",".."],
                "i" => [".0","0.",".."],
                "j" => [".0","00",".."],
                "k" => ["0.","..","0."],
                "l" => ["0.","0.","0."],
                "m" => ["00","..","0."],
                "n" => ["00","0.",".0"],
                "o" => ["0.",".0","0."],
                "p" => ["00","0.","0."],
                "q" => ["00","00","0."],
                "r" => ["0.","00","0."],
                "s" => [".0","0.","0."],
                "t" => [".0","00","0."],
                "u" => ["0.","..","00"],
                "v" => ["0.","0.","00"],
                "w" => [".0","00",".0"],
                "x" => ["00","..","00"],
                "y" => ["00",".0","00"],
                "z" => ["0.",".0","00"],
                "shift" => ["..","..",".0"],
                "A" => ["..0.", "....", ".0.."],
                "B" => ["..0.", "..0.", ".0.."],
                "C" => ["..00", '....', '.0..'],
                "D" => ["..00", "...0", ".0.."],
                "E" => ["..0.", "...0", ".0.."],
                "F" => ["..00", "..0.", ".0.."],
                "G" => ["..00", "..00", ".0.."],
                "H" => ["..0.", "..00", ".0.."],
                "I" => ["...0", "..0.", ".0.."],
                "J" => ["...0", "..00", ".0.."],
                "K" => ["..0.", "....", ".00."],
                "L" => ["..0.", "..0.", ".00."],
                "M" => ["..00", "....", ".00."],
                "N" => ["..00", "...0", ".00."],
                "O" => ["..0.", "...0", ".00."],
                "P" => ["..00", "..0.", ".00."],
                "Q" => ["..00", "..00", ".00."],
                "R" => ["..0.", "..00", ".00."],
                "S" => ["...0", "..0.", ".00."],
                "T" => ["...0", "..00", ".00."],
                "U" => ["..0.", "....", ".000"],
                "V" => ["..0.", "..0.", ".000"],
                "W" => ["...0", "..00", ".0.0"],
                "X" => ["..00", "....", ".000"],
                "Y" => ["..00", "...0", ".000"],
                "Z" => ["..0.", "...0", ".000"],
                "!" => ["..","00","0."],
                "'" => ["..","..","0."],
                "," => ["..","0.",".."],
                "-" => ["..","..","00"],
                "." => ["..","00",".0"],
                "?" => ["..","0.","00"],
                " " => ["..","..",".."],
                "#" => [".0",".0","00"],
                "0" => [".0","00",".."],
                "1" => ["0.","..",".."],
                "2" => ["0.","0.",".."],
                "3" => ["00","..",".."],
                "4" => ["00",".0",".."],
                "5" => ["0.",".0",".."],
                "6" => ["00","0.",".."],
                "7" => ["00","00",".."],
                "8" => ["0.","00",".."],
                "9" => [".0","0.",".."]}
    assert_equal result, alphabet.alphanumeric
  end


end
